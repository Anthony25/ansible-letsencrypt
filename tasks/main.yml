---
  - name: Ensure webroot exists
    file: path="{{ letsencrypt_webroot_path }}" state=directory follow=yes
    become: yes

  - name: Attempt to get the certificate using the webroot authenticator
    command: "{{ letsencrypt_command }} --webroot -w {{ letsencrypt_webroot_path }} certonly {% for domain in item %}-d {{ domain }} {% endfor %}"
    args:
      creates: "/etc/letsencrypt/live/{{ item[0] }}"
    when: letsencrypt_authenticator == "webroot"
    ignore_errors: True
    with_items: "{{ letsencrypt_cert_domains }}"

  - name: Attempt to get the certificate using the standalone authenticator (in case eg the webserver isn't running yet)
    command: "{{ letsencrypt_command }} -a standalone auth {% for domain in item %}-d {{ domain }} {% endfor %}"
    args:
      creates: "/etc/letsencrypt/live/{{ item[0] }}"
    with_items: "{{ letsencrypt_cert_domains }}"

  - name: Fix the renewal file
    ini_file: section=renewalparams option={{ item.key }} value={{ item.value }} dest="/etc/letsencrypt/renewal/{{ letsencrypt_cert_domains[0][0][0] }}.conf"
    become: yes
    with_dict:
      os_packages_only: False
      verb: certonly
      noninteractive_mode: False
      uir: False
      hsts: False
      authenticator: '{{ letsencrypt_authenticator }}'

  - name: Fix the webroot map in the renewal file
    ini_file: section="[webroot_map]" option={{ item }} value={{ letsencrypt_webroot_path }} dest="/etc/letsencrypt/renewal/{{ letsencrypt_cert_domains[0][0][0] }}.conf"
    become: yes
    with_items: "{{ letsencrypt_cert_domains }}"
